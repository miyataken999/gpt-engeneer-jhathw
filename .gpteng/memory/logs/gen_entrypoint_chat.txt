
2024-06-19T03:27:42.496944
================================ System Message ================================

You will get information about a codebase that is currently on disk in the current folder.
The user will ask you to write a script that runs the code in a specific way.
You will answer with code blocks that include all the necessary terminal commands.
Do not install globally. Do not use sudo.
Do not explain the code, just give the commands.
Do not use placeholders, use example values (like . for a folder argument) if necessary.


================================ Human Message =================================


        Make a unix script that
        a) installs dependencies
        b) runs all necessary parts of the codebase (in parallel if necessary)
        
Information about the codebase:

```
File: Structure
1 bottega_veneta/
2 bottega_veneta/
3 settings.py
4 urls.py
5 wsgi.py
6 __init__.py
7 apps/
8 evaluation/
9 models.py
10 views.py
11 serializers.py
12 __init__.py
13 __pycache__/
14 db.sqlite3
15 manage.py
16 requirements.txt

File: requirements.txt
1 Django==3.2.5

File: bottega_veneta/settings.py
1 INSTALLED_APPS = [
2     'django.contrib.admin',
3     'django.contrib.auth',
4     'django.contrib.contenttypes',
5     'django.contrib.sessions',
6     'django.contrib.messages',
7     'django.contrib.staticfiles',
8     'evaluation',
9 ]
10 
11 DATABASES = {
12     'default': {
13         'ENGINE': 'django.db.backends.sqlite3',
14         'NAME': BASE_DIR / 'db.sqlite3',
15     }
16 }

File: bottega_veneta/urls.py
1 from django.contrib import admin
2 from django.urls import path, include
3 
4 urlpatterns = [
5     path('admin/', admin.site.urls),
6     path('api/', include('evaluation.urls')),
7 ]

File: evaluation/models.py
1 from django.db import models
2 
3 class Product(models.Model):
4     name = models.CharField(max_length=255)
5     brand = models.CharField(max_length=255)
6     purchase_place = models.CharField(max_length=255)
7     purchase_price = models.DecimalField(max_digits=10, decimal_places=2)
8     quality_state = models.CharField(max_length=255)
9     email_state = models.CharField(max_length=255)
10 
11 class Evaluation(models.Model):
12     product = models.ForeignKey(Product, on_delete=models.CASCADE)
13     rating = models.DecimalField(max_digits=3, decimal_places=2)
14     comment = models.TextField()

File: evaluation/views.py
1 from rest_framework.response import Response
2 from rest_framework.views import APIView
3 from .models import Product, Evaluation
4 from .serializers import ProductSerializer, EvaluationSerializer
5 
6 class ProductListView(APIView):
7     def get(self, request):
8         products = Product.objects.all()
9         serializer = ProductSerializer(products, many=True)
10         return Response(serializer.data)
11 
12 class EvaluationCreateView(APIView):
13     def post(self, request):
14         serializer = EvaluationSerializer(data=request.data)
15         if serializer.is_valid():
16             serializer.save()
17             return Response(serializer.data, status=201)
18         return Response(serializer.errors, status=400)

File: evaluation/serializers.py
1 from rest_framework import serializers
2 from .models import Product, Evaluation
3 
4 class ProductSerializer(serializers.ModelSerializer):
5     class Meta:
6         model = Product
7         fields = ['id', 'name', 'brand', 'purchase_place', 'purchase_price', 'quality_state', 'email_state']
8 
9 class EvaluationSerializer(serializers.ModelSerializer):
10     class Meta:
11         model = Evaluation
12         fields = ['id', 'product', 'rating', 'comment']

File: evaluation/urls.py
1 from django.urls import path
2 from .views import ProductListView, EvaluationCreateView
3 
4 urlpatterns = [
5     path('products/', ProductListView.as_view()),
6     path('evaluations/', EvaluationCreateView.as_view()),
7 ]

```

================================== Ai Message ==================================

Here is the Unix script that installs dependencies and runs the codebase:

```
#!/bin/bash

# Install dependencies
pip install -r requirements.txt

# Run the Django development server
python manage.py runserver
```
